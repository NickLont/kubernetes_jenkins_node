apiVersion: apps/v1
# kind of object we are creating
kind: Deployment
metadata:  
  # name of the deployment
  name: nodejs-deployment
  labels:    
    app: kubernetes-jenkins-node
# specification of the object
spec:  
  # How many pods you want to deploy in the cluster under this Deployment
  replicas: 1  
  # selector field defines how the Deployment finds which Pods to manage
  selector:    
    matchLabels:
      app: kubernetes-jenkins-node
  template:
    metadata:
      # The Pods are labeled app: kubernetes-jenkins-node using the .metadata.labels field
      labels:
        app: kubernetes-jenkins-node
    spec: 
     containers:
      # Create one container and name it kubernetes-jenkins-node using the .spec.template.spec.containers[0].name field
      - name: kubernetes-jenkins-node
        # The Pod templateâ€™s specification, or .template.spec field indicates that the Pods run one container, kubernetes-jenkins-node runs the image we specified from DockerHub
        image: tormentoras/nodejs-kub
        ports:
        - containerPort: 8000
---
apiVersion: v1
# Service to expose the deployment
kind: Service
metadata:
  name: nodejs-service
  labels:
    app: kubernetes-jenkins-node
spec:
  # In the spec.type we specify nodeport. This helps to expose our pod
  # We can specify the nodeport manually between 30000 to 32767.Else it will automatically assign within the range
  type: NodePort
  ports:
  - port: 8000
    protocol: TCP
    # The targetPort has to match the container port in the deployment part
    targetPort: 8000
    nodePort: 32121
  selector:
    app: kubernetes-jenkins-node